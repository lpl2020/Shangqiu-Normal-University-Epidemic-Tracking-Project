<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.demo.sq.mappers.StatementsWithSortingMapper" >
  <resultMap id="BaseResultMap" type="com.example.demo.sq.entity.StatementsWithSorting" >
    <result column="db" property="db" jdbcType="VARCHAR" />
    <result column="exec_count" property="execCount" jdbcType="BIGINT" />
    <result column="sort_merge_passes" property="sortMergePasses" jdbcType="BIGINT" />
    <result column="avg_sort_merges" property="avgSortMerges" jdbcType="DECIMAL" />
    <result column="sorts_using_scans" property="sortsUsingScans" jdbcType="BIGINT" />
    <result column="sort_using_range" property="sortUsingRange" jdbcType="BIGINT" />
    <result column="rows_sorted" property="rowsSorted" jdbcType="BIGINT" />
    <result column="avg_rows_sorted" property="avgRowsSorted" jdbcType="DECIMAL" />
    <result column="first_seen" property="firstSeen" jdbcType="TIMESTAMP" />
    <result column="last_seen" property="lastSeen" jdbcType="TIMESTAMP" />
    <result column="digest" property="digest" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.example.demo.sq.entity.StatementsWithSortingWithBLOBs" extends="BaseResultMap" >
    <result column="query" property="query" jdbcType="LONGVARCHAR" />
    <result column="total_latency" property="totalLatency" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Blob_Column_List" >
    query, total_latency
  </sql>
  <insert id="insert" parameterType="com.example.demo.sq.entity.StatementsWithSortingWithBLOBs" >
    insert into statements_with_sorting (db, exec_count, sort_merge_passes, 
      avg_sort_merges, sorts_using_scans, sort_using_range, 
      rows_sorted, avg_rows_sorted, first_seen, 
      last_seen, digest, query, 
      total_latency)
    values (#{db,jdbcType=VARCHAR}, #{execCount,jdbcType=BIGINT}, #{sortMergePasses,jdbcType=BIGINT}, 
      #{avgSortMerges,jdbcType=DECIMAL}, #{sortsUsingScans,jdbcType=BIGINT}, #{sortUsingRange,jdbcType=BIGINT}, 
      #{rowsSorted,jdbcType=BIGINT}, #{avgRowsSorted,jdbcType=DECIMAL}, #{firstSeen,jdbcType=TIMESTAMP}, 
      #{lastSeen,jdbcType=TIMESTAMP}, #{digest,jdbcType=VARCHAR}, #{query,jdbcType=LONGVARCHAR}, 
      #{totalLatency,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.sq.entity.StatementsWithSortingWithBLOBs" >
    insert into statements_with_sorting
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="db != null" >
        db,
      </if>
      <if test="execCount != null" >
        exec_count,
      </if>
      <if test="sortMergePasses != null" >
        sort_merge_passes,
      </if>
      <if test="avgSortMerges != null" >
        avg_sort_merges,
      </if>
      <if test="sortsUsingScans != null" >
        sorts_using_scans,
      </if>
      <if test="sortUsingRange != null" >
        sort_using_range,
      </if>
      <if test="rowsSorted != null" >
        rows_sorted,
      </if>
      <if test="avgRowsSorted != null" >
        avg_rows_sorted,
      </if>
      <if test="firstSeen != null" >
        first_seen,
      </if>
      <if test="lastSeen != null" >
        last_seen,
      </if>
      <if test="digest != null" >
        digest,
      </if>
      <if test="query != null" >
        query,
      </if>
      <if test="totalLatency != null" >
        total_latency,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="db != null" >
        #{db,jdbcType=VARCHAR},
      </if>
      <if test="execCount != null" >
        #{execCount,jdbcType=BIGINT},
      </if>
      <if test="sortMergePasses != null" >
        #{sortMergePasses,jdbcType=BIGINT},
      </if>
      <if test="avgSortMerges != null" >
        #{avgSortMerges,jdbcType=DECIMAL},
      </if>
      <if test="sortsUsingScans != null" >
        #{sortsUsingScans,jdbcType=BIGINT},
      </if>
      <if test="sortUsingRange != null" >
        #{sortUsingRange,jdbcType=BIGINT},
      </if>
      <if test="rowsSorted != null" >
        #{rowsSorted,jdbcType=BIGINT},
      </if>
      <if test="avgRowsSorted != null" >
        #{avgRowsSorted,jdbcType=DECIMAL},
      </if>
      <if test="firstSeen != null" >
        #{firstSeen,jdbcType=TIMESTAMP},
      </if>
      <if test="lastSeen != null" >
        #{lastSeen,jdbcType=TIMESTAMP},
      </if>
      <if test="digest != null" >
        #{digest,jdbcType=VARCHAR},
      </if>
      <if test="query != null" >
        #{query,jdbcType=LONGVARCHAR},
      </if>
      <if test="totalLatency != null" >
        #{totalLatency,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
</mapper>