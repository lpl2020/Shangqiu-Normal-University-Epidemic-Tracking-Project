<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.demo.sq.mappers.NdbBinlogIndexMapper" >
  <resultMap id="BaseResultMap" type="com.example.demo.sq.entity.NdbBinlogIndex" >
    <id column="epoch" property="epoch" jdbcType="BIGINT" />
    <id column="orig_server_id" property="origServerId" jdbcType="INTEGER" />
    <id column="orig_epoch" property="origEpoch" jdbcType="BIGINT" />
    <result column="Position" property="position" jdbcType="BIGINT" />
    <result column="File" property="file" jdbcType="VARCHAR" />
    <result column="inserts" property="inserts" jdbcType="INTEGER" />
    <result column="updates" property="updates" jdbcType="INTEGER" />
    <result column="deletes" property="deletes" jdbcType="INTEGER" />
    <result column="schemaops" property="schemaops" jdbcType="INTEGER" />
    <result column="gci" property="gci" jdbcType="INTEGER" />
    <result column="next_position" property="nextPosition" jdbcType="BIGINT" />
    <result column="next_file" property="nextFile" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    epoch, orig_server_id, orig_epoch, Position, File, inserts, updates, deletes, schemaops, 
    gci, next_position, next_file
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="com.example.demo.sq.entity.NdbBinlogIndexKey" >
    select 
    <include refid="Base_Column_List" />
    from ndb_binlog_index
    where epoch = #{epoch,jdbcType=BIGINT}
      and orig_server_id = #{origServerId,jdbcType=INTEGER}
      and orig_epoch = #{origEpoch,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.example.demo.sq.entity.NdbBinlogIndexKey" >
    delete from ndb_binlog_index
    where epoch = #{epoch,jdbcType=BIGINT}
      and orig_server_id = #{origServerId,jdbcType=INTEGER}
      and orig_epoch = #{origEpoch,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.example.demo.sq.entity.NdbBinlogIndex" >
    insert into ndb_binlog_index (epoch, orig_server_id, orig_epoch, 
      Position, File, inserts, 
      updates, deletes, schemaops, 
      gci, next_position, next_file
      )
    values (#{epoch,jdbcType=BIGINT}, #{origServerId,jdbcType=INTEGER}, #{origEpoch,jdbcType=BIGINT}, 
      #{position,jdbcType=BIGINT}, #{file,jdbcType=VARCHAR}, #{inserts,jdbcType=INTEGER}, 
      #{updates,jdbcType=INTEGER}, #{deletes,jdbcType=INTEGER}, #{schemaops,jdbcType=INTEGER}, 
      #{gci,jdbcType=INTEGER}, #{nextPosition,jdbcType=BIGINT}, #{nextFile,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.sq.entity.NdbBinlogIndex" >
    insert into ndb_binlog_index
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="epoch != null" >
        epoch,
      </if>
      <if test="origServerId != null" >
        orig_server_id,
      </if>
      <if test="origEpoch != null" >
        orig_epoch,
      </if>
      <if test="position != null" >
        Position,
      </if>
      <if test="file != null" >
        File,
      </if>
      <if test="inserts != null" >
        inserts,
      </if>
      <if test="updates != null" >
        updates,
      </if>
      <if test="deletes != null" >
        deletes,
      </if>
      <if test="schemaops != null" >
        schemaops,
      </if>
      <if test="gci != null" >
        gci,
      </if>
      <if test="nextPosition != null" >
        next_position,
      </if>
      <if test="nextFile != null" >
        next_file,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="epoch != null" >
        #{epoch,jdbcType=BIGINT},
      </if>
      <if test="origServerId != null" >
        #{origServerId,jdbcType=INTEGER},
      </if>
      <if test="origEpoch != null" >
        #{origEpoch,jdbcType=BIGINT},
      </if>
      <if test="position != null" >
        #{position,jdbcType=BIGINT},
      </if>
      <if test="file != null" >
        #{file,jdbcType=VARCHAR},
      </if>
      <if test="inserts != null" >
        #{inserts,jdbcType=INTEGER},
      </if>
      <if test="updates != null" >
        #{updates,jdbcType=INTEGER},
      </if>
      <if test="deletes != null" >
        #{deletes,jdbcType=INTEGER},
      </if>
      <if test="schemaops != null" >
        #{schemaops,jdbcType=INTEGER},
      </if>
      <if test="gci != null" >
        #{gci,jdbcType=INTEGER},
      </if>
      <if test="nextPosition != null" >
        #{nextPosition,jdbcType=BIGINT},
      </if>
      <if test="nextFile != null" >
        #{nextFile,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.sq.entity.NdbBinlogIndex" >
    update ndb_binlog_index
    <set >
      <if test="position != null" >
        Position = #{position,jdbcType=BIGINT},
      </if>
      <if test="file != null" >
        File = #{file,jdbcType=VARCHAR},
      </if>
      <if test="inserts != null" >
        inserts = #{inserts,jdbcType=INTEGER},
      </if>
      <if test="updates != null" >
        updates = #{updates,jdbcType=INTEGER},
      </if>
      <if test="deletes != null" >
        deletes = #{deletes,jdbcType=INTEGER},
      </if>
      <if test="schemaops != null" >
        schemaops = #{schemaops,jdbcType=INTEGER},
      </if>
      <if test="gci != null" >
        gci = #{gci,jdbcType=INTEGER},
      </if>
      <if test="nextPosition != null" >
        next_position = #{nextPosition,jdbcType=BIGINT},
      </if>
      <if test="nextFile != null" >
        next_file = #{nextFile,jdbcType=VARCHAR},
      </if>
    </set>
    where epoch = #{epoch,jdbcType=BIGINT}
      and orig_server_id = #{origServerId,jdbcType=INTEGER}
      and orig_epoch = #{origEpoch,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.demo.sq.entity.NdbBinlogIndex" >
    update ndb_binlog_index
    set Position = #{position,jdbcType=BIGINT},
      File = #{file,jdbcType=VARCHAR},
      inserts = #{inserts,jdbcType=INTEGER},
      updates = #{updates,jdbcType=INTEGER},
      deletes = #{deletes,jdbcType=INTEGER},
      schemaops = #{schemaops,jdbcType=INTEGER},
      gci = #{gci,jdbcType=INTEGER},
      next_position = #{nextPosition,jdbcType=BIGINT},
      next_file = #{nextFile,jdbcType=VARCHAR}
    where epoch = #{epoch,jdbcType=BIGINT}
      and orig_server_id = #{origServerId,jdbcType=INTEGER}
      and orig_epoch = #{origEpoch,jdbcType=BIGINT}
  </update>
</mapper>